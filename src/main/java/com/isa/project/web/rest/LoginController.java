package com.isa.project.web.rest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.isa.project.bean.User;
import com.isa.project.repository.UserRepository;
import com.isa.project.security.jwt.TokenProvider;
import com.isa.project.service.implementation.EmailService;
import com.isa.project.web.dto.RegistrationUserDto;

@RestController // This means that this class is a Controller
@CrossOrigin
@RequestMapping(value = "/api/login") // This means URL's start with /login (after									// Application path)
public class LoginController {

	// This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	
	@Autowired
	private EmailService emailService;
	
	
	@Autowired
	private UserDetailsService userDetailsService;
	

	@RequestMapping(value = "/registrationMessage", method = RequestMethod.POST, consumes="application/json")
	public ResponseEntity<String> displayregistrationMessage(@RequestBody RegistrationUserDto registrationUserDto) {

		/*TokenProvider tp = new TokenProvider();
		String name = tp.getUsernameFromToken(token);
		System.out.println(name + " pogodio registraciju");*/
		
		/*Role r = new Role();
		
		r.setRole("REGISTERED_USER");

		User user = new User();
		System.out.println("Primio usera : " + user);
		
		Set<Role> s = new HashSet<Role>();
		s.add(r);

		User u = new User();

		u.setEmail(user.getEmail());
		u.setFirstName(user.getFirstName());
		u.setLastName(user.getLastName());
		u.setCity(user.getCity());
		u.setPhoneNumber(user.getPhoneNumber());
		u.setRoles(s);
		u.setEnabled(false); // NIJE POTVRDIO KONFIRMACIONI MAIL
		//if (password.equals(passwordRepeat))
			u.setPasswordHash(new BCryptPasswordEncoder().encode("123456"));
		//else
			//return "Greska uneli ste razlicite sifre!";
		
	    u.setConfirmationToken(UUID.randomUUID().toString());
        
	    userRepository.save(u);
			
		String appUrl = request.getScheme() + "://" + request.getServerName();
		
		SimpleMailMessage registrationEmail = new SimpleMailMessage();
		registrationEmail.setTo(u.getEmail());
		registrationEmail.setSubject("Registration Confirmation");
		registrationEmail.setText("To confirm your e-mail address, please click the link below:\n"
				+ appUrl + ":8080/login/confirm?token=" + u.getConfirmationToken());
		registrationEmail.setFrom("noreply@domain.com");
		
		emailService.sendEmail(registrationEmail);
		
		modelAndView.addObject("confirmationMessage", "A confirmation e-mail has been sent to " + u.getEmail());
		modelAndView.setViewName("register");
		
		// SLANJE KONFIRMACIONOG MAILA
		

		//userRepository.save(u);

		System.out.println("Pokupljeni ovi podaci: " + u);
		System.out.println("A confirmation e-mail has been sent to " + u.getEmail());*/

		return new ResponseEntity<String>("Activation link has been sent to your email address!",HttpStatus.OK);
	}
	
	// Process confirmation link
	@RequestMapping(value="/confirm", method = RequestMethod.GET)
	public String showConfirmationPage(@RequestParam("token") String token) {
			
	/*	User user = userService.findByConfirmationToken(token);
		System.out.println("Pogodio confirm!");
			
		if (user == null) { // No token found in DB
			System.out.println("Nije pronadjen token!");
		} else { // Token found
			System.out.println("Pronasao usera sa datim tokenom!");
			user.setEnabled(true);
			userRepository.save(user);
		}*/
			
		
		return "/login/login";		
	}
	

	@Autowired
    private BCryptPasswordEncoder bCryptPasswordEncoder;
	
	@Autowired
	private UserRepository applicationUserRepository;
	
    @PostMapping("/sign-up")
    public void signUp(@RequestBody User user) {
        user.setPassword(bCryptPasswordEncoder.encode(user.getPassword()));
        applicationUserRepository.save(user);
    }
	
<<<<<<< HEAD
	@RequestMapping(value = "/test", method = RequestMethod.POST,
			consumes="application/json",
			produces="application/json")
	public ResponseEntity<String> test(@RequestBody Object uu) {
		
		
		
		
		System.out.println("Pogodio confirm! ***");
=======
>>>>>>> 6232f4c4285c39c2022f2e77d172f3f5e0dd0a86

// janca@janca sifra 123

}
