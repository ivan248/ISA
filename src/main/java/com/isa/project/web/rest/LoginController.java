package com.isa.project.web.rest;

import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.annotation.Bean;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.ModelAndView;

import com.isa.project.bean.Role;
import com.isa.project.bean.User;
import com.isa.project.config.OnRegistrationCompleteEvent;
import com.isa.project.repository.UserRepository;
import com.isa.project.service.UserService;
import com.isa.project.service.implementation.EmailService;

@Controller // This means that this class is a Controller
@RequestMapping(value = "/login") // This means URL's start with /login (after									// Application path)
public class LoginController {

	// This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private EmailService emailService;
	
	@Autowired
	private UserService userService;
	


	@RequestMapping(value = "", method = RequestMethod.GET)
	public String index(Model model) {

		return "login/login";
	}

	// @ResponseBody means the returned String is the response, not a view name
	// @RequestParam means it is a parameter from the GET or POST request

	// Login form

	@RequestMapping(value = "/home", method = RequestMethod.GET)
	public String displayHome() {

		return "login/home";
	}

	@RequestMapping(value = "/registration", method = RequestMethod.GET)
	public String displayRegistrationForm() {

		return "login/registration";
	}

	@RequestMapping(value = "/registrationMessage", method = RequestMethod.POST)
	public String displayregistrationMessage(@RequestParam String email, @RequestParam String password,
			@RequestParam String passwordRepeat, @RequestParam String ime, @RequestParam String prezime,
			@RequestParam String grad, @RequestParam int brojTelefona,
			HttpServletRequest request) {

		Role r = new Role();
		r.setRole("REGISTERED_USER");

		Set<Role> s = new HashSet<Role>();
		s.add(r);

		User u = new User();

		u.setEmail(email);
		u.setFirstName(ime);
		u.setLastName(prezime);
		u.setCity(grad);
		u.setPhoneNumber(brojTelefona);
		u.setRoles(s);
		u.setEnabled(false); // NIJE POTVRDIO KONFIRMACIONI MAIL
		if (password.equals(passwordRepeat))
			u.setPasswordHash(new BCryptPasswordEncoder().encode(password));
		else
			return "Greska uneli ste razlicite sifre!";
		
	    u.setConfirmationToken(UUID.randomUUID().toString());
        
	    userRepository.save(u);
			
		String appUrl = request.getScheme() + "://" + request.getServerName();
		
		SimpleMailMessage registrationEmail = new SimpleMailMessage();
		registrationEmail.setTo(u.getEmail());
		registrationEmail.setSubject("Registration Confirmation");
		registrationEmail.setText("To confirm your e-mail address, please click the link below:\n"
				+ appUrl + ":8080/login/confirm?token=" + u.getConfirmationToken());
		registrationEmail.setFrom("noreply@domain.com");
		
		emailService.sendEmail(registrationEmail);
		
/*		modelAndView.addObject("confirmationMessage", "A confirmation e-mail has been sent to " + u.getEmail());
		modelAndView.setViewName("register");
		*/
		// SLANJE KONFIRMACIONOG MAILA
		

		//userRepository.save(u);

		System.out.println("Pokupljeni ovi podaci: " + u);
		System.out.println("A confirmation e-mail has been sent to " + u.getEmail());

		return "login/registrationMessage";
	}
	
	// Process confirmation link
	@RequestMapping(value="/confirm", method = RequestMethod.GET)
	public String showConfirmationPage(@RequestParam("token") String token) {
			
		User user = userService.findByConfirmationToken(token);
		System.out.println("Pogodio confirm!");
			
		if (user == null) { // No token found in DB
			System.out.println("Nije pronadjen token!");
		} else { // Token found
			System.out.println("Pronasao usera sa datim tokenom!");
			user.setEnabled(true);
			userRepository.save(user);
		}
			
		
		return "/login/home";		
	}



}
