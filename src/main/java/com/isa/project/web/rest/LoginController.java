package com.isa.project.web.rest;

import java.util.HashSet;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.isa.project.bean.Role;
import com.isa.project.bean.User;
import com.isa.project.repository.UserRepository;

@Controller // This means that this class is a Controller
@RequestMapping(value = "/login") // This means URL's start with /login (after
									// Application path)
public class LoginController {

	// This means to get the bean called visitorRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	@Autowired
	private UserRepository userRepository;

	@RequestMapping(value = "", method = RequestMethod.GET)
	public String index(Model model) {

		return "login/login";
	}

	// @ResponseBody means the returned String is the response, not a view name
	// @RequestParam means it is a parameter from the GET or POST request

	// Login form

	@RequestMapping(value = "/home", method = RequestMethod.GET)
	public String DisplayHome() {

		return "login/home";
	}

	@PreAuthorize("hasRole('SYS_ADMIN')")
	@RequestMapping(value = "/add", method = RequestMethod.GET)
	public String displayAddUserForm(Model model) {

		return "login/add";
	}

	@RequestMapping(value = "/registration", method = RequestMethod.GET)
	public String displayRegistrationForm() {

		return "login/registration";
	}

	@RequestMapping(value = "/registrationMessage", method = RequestMethod.POST)
	public String displayregistrationMessage(@RequestParam String email, @RequestParam String password,
			@RequestParam String passwordRepeat, @RequestParam String ime, @RequestParam String prezime,
			@RequestParam String grad, @RequestParam int brojTelefona) {

		Role r = new Role();
		r.setRole("REGISTERED_USER");

		Set<Role> s = new HashSet<Role>();
		s.add(r);

		User u = new User();

		u.setEmail(email);
		u.setFirstName(ime);
		u.setLastName(prezime);
		u.setCity(grad);
		u.setPhoneNumber(brojTelefona);
		u.setRoles(s);
		if (password.equals(passwordRepeat))
			u.setPasswordHash(new BCryptPasswordEncoder().encode(password));
		else
			return "Greska uneli ste razlicite sifre!";

		userRepository.save(u);

		System.out.println("Pokupljeni ovi podaci: " + u);

		return "login/registrationMessage";
	}

	@PreAuthorize("hasRole('SYS_ADMIN')")
	@RequestMapping(value = "/add", method = RequestMethod.POST)
	public String processAddUserForm(@RequestParam String userName, @RequestParam String userPassword) {
		// String cheeseName = request.getParameter("cheeseName"); //cheeseName
		// mora da bude isti kao Name input taga html forme LOS NACIN

		// redirect to /chese
		return "sucess"; // kad se ovako napise, URL ce biti
							// localhost:8080/cheese jer je requestmapping ove
							// cele klase /cheese
	}

	@PreAuthorize("hasRole('SYS_ADMIN')")
	@RequestMapping(value = "all", method = RequestMethod.GET)
	public @ResponseBody Iterable<User> getAllUsers() {

		return userRepository.findAll();
	}


}
